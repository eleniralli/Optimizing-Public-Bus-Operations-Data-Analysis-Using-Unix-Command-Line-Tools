eleni@DESKTOP-OQRR16N ~
$ $ curl -O https://www.spinellis.gr/cgi-bin/oasa-history?id=f2822312
-bash: $: command not found

eleni@DESKTOP-OQRR16N ~
$ curl -O https://www.spinellis.gr/cgi-bin/oasa-history?id=f2822312
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  111M    0  111M    0     0  3112k      0 --:--:--  0:00:36 --:--:-- 3209k

eleni@DESKTOP-OQRR16N ~
$ gunzip oasa-history.gz
gzip: oasa-history.gz: No such file or directory

eleni@DESKTOP-OQRR16N ~
$ ^[[200~pwd
-bash: $'\E[200~pwd': command not found

eleni@DESKTOP-OQRR16N ~
$ ~pwd
-bash: ~pwd: command not found

eleni@DESKTOP-OQRR16N ~
$ pwd
/home/eleni

eleni@DESKTOP-OQRR16N ~
$ ls -l
total 114244
-rwxr-xr-x 1 eleni eleni 116984745 Feb 26 10:04 oasa-history

eleni@DESKTOP-OQRR16N ~
$ file oasa-history
oasa-history: gzip compressed data, was "monitor.out", last modified: Mon Feb 26 08:03:13 2024, from Unix, original size modulo 2^32 550234326

eleni@DESKTOP-OQRR16N ~
$ ^[[200~ file oasa-history
-bash: $'\E[200~': command not found

eleni@DESKTOP-OQRR16N ~
$ gunzip oasa-history
gzip: oasa-history: unknown suffix -- ignored

eleni@DESKTOP-OQRR16N ~
$ gunzip -c oasa-history > oasa-history-decompressed

eleni@DESKTOP-OQRR16N ~
$ ^[[200~
-bash: $'\E[200~': command not found

eleni@DESKTOP-OQRR16N ~
$ ~
file oasa-history-decompressed
-bash: /home/eleni: Is a directory
oasa-history-decompressed: CSV text
___________________________________________________________________________________________________________________________________________________


eleni@DESKTOP-OQRR16N ~
$ curl -o oasa-history.gz "https://www.spinellis.gr/cgi-bin/oasa-history?id=f2822312"

  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  111M    0  111M    0     0  3181k      0 --:--:--  0:00:35 --:--:-- 3277k

eleni@DESKTOP-OQRR16N ~
$ gunzip oasa-history.gz
gzip: oasa-history already exists; do you wish to overwrite (y or n)? y





eleni@DESKTOP-OQRR16N ~
$ head oasa-history-decompressed
2024-01-01T00:00:14,4882,70198,Jan  1 2024 12:00:06:000AM,38.0937960,23.6947250
2024-01-01T00:01:47,4533, 033,Jan  1 2024 12:00:52:000AM,38.0740910,23.5344580
2024-01-01T00:01:47,4533, 710,Jan  1 2024 12:01:35:000AM,38.0737260,23.5333460
2024-01-01T00:01:58,4372,30720,Jan  1 2024 12:01:50:000AM,37.9716740,23.6695470
2024-01-01T00:02:17,3609,60501,Jan  1 2024 12:02:04:000AM,38.0115090,23.8696180
2024-01-01T00:02:37,3965,16104,Jan  1 2024 12:02:33:000AM,38.0095590,23.7213870
2024-01-01T00:02:38,3966,16159,Jan  1 2024 12:02:34:000AM,38.0402620,23.8101520
2024-01-01T00:02:38,3966,16164,Jan  1 2024 12:00:41:000AM,37.9370480,23.9471560
2024-01-01T00:02:38,2051,40834,Jan  1 2024 12:02:34:000AM,38.0057490,23.8693120
2024-01-01T00:02:38,2051,46178,Jan  1 2024 12:02:24:000AM,37.9759850,23.7463180

ερωτηση σελ. 4/27
Από την έξοδο της εντολής head που παρέχετε, είναι σαφές ότι ο χαρακτήρας διαχωρισμού πεδίων στα δεδομένα είναι το κόμμα (,). 
Αυτό σημαίνει ότι τα δεδομένα χρησιμοποιούν το κόμμα ως διαχωριστικό για να ξεχωρίζουν τα διάφορα πεδία σε κάθε εγγραφή. Αυτό είναι τυπικό για αρχεία CSV (Comma-Separated Values), 
τα οποία είναι μορφή αρχείου που χρησιμοποιείται ευρέως για την αποθήκευση ταμπελών δεδομένων με τη μορφή κειμένου.

ερωτηση σελ. 5/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $1 "," $2 "," $3 "," $4 "," $5 "," $6}' oasa-history > new_oasa_history.csv
this dataset is too large for the Excel grid .If you save this workbook, you 'll lose data that wasn't loaded . 

ερωτηση σελ. 6/27
eleni@DESKTOP-OQRR16N ~
$ wc -l oasa-history
6898381 oasa-history
Για να μάθετε πόσες εγγραφές περιέχονται στα δεδομένα μέσω της Cygwin, μπορείτε να χρησιμοποιήσετε την εντολή wc (word count) με την παράμετρο -l για να μετρήσετε τις γραμμές του αρχείου. 
Κάθε γραμμή στο αρχείο σας αντιπροσωπεύει μια εγγραφή. Ακολουθεί η εντολή που πρέπει να χρησιμοποιήσετε:
Αυτή η εντολή θα σας δώσει τον αριθμό των γραμμών στο αρχείο oasa-history, ο οποίος αντιστοιχεί στον αριθμό των εγγραφών που περιέχονται στα δεδομένα.

ερωτηση σελ. 7/27
eleni@DESKTOP-OQRR16N ~
$ tail -n 1 oasa-history | cut -d',' -f1
2024-02-26T10:47:43



ερωτηση σελ. 8/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $3}' oasa-history | sort | uniq | wc -l
1686
Για να βρείτε πόσα διαφορετικά λεωφορεία εμφανίζονται στα δεδομένα, θα χρησιμοποιήσετε μια σειρά από εντολές Unix για να εξάγετε τον αριθμό του λεωφορείου από κάθε εγγραφή, 
να αφαιρέσετε τυχόν διπλότυπα και να μετρήσετε τον συνολικό αριθμό των μοναδικών τιμών.
 Αυτό μπορεί να γίνει με την εντολή awk, σε συνδυασμό με τις εντολές sort και uniq.
Ας αναλύσουμε την εντολή βήμα προς βήμα:

awk -F, '{print $3}' oasa-history: Αυτή η εντολή χρησιμοποιεί το awk για να διαχωρίσει κάθε γραμμή του αρχείου oasa-history χρησιμοποιώντας το κόμμα (,) 
ως διαχωριστικό και να εκτυπώσει το τρίτο πεδίο, το οποίο αντιστοιχεί στον αριθμό του λεωφορείου.
sort: Ταξινομεί τις εξαχθείσες τιμές, προετοιμάζοντας τη λίστα για την αφαίρεση διπλοτύπων.
uniq: Αφαιρεί τυχόν διπλότυπες εμφανίσεις αριθμών λεωφορείων, αφήνοντας μια λίστα με μόνο μοναδικές τιμές.
wc -l: Μετράει τον αριθμό των γραμμών στην τελική λίστα, ο οποίος αντιστοιχεί στον συνολικό αριθμό διαφορετικών λεωφορείων που εμφανίζονται στα δεδομένα.
Αυτή η εντολή θα σας δώσει τον ακριβή αριθμό των διαφορετικών λεωφορείων που καταγράφηκαν στο αρχείο δεδομένων oasa-histor




ερωτηση σελ. 9/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $2}' oasa-history | sort | uniq | wc -l
718
Για να βρείτε πόσες διαφορετικές διαδρομές (γραμμές λεωφορείων) καλύπτονται από τα δεδομένα, μπορείτε να χρησιμοποιήσετε μια
 παρόμοια προσέγγιση με αυτήν που χρησιμοποιήσαμε για να βρούμε τον αριθμό των διαφορετικών λεωφορείων, 
αλλά αυτή τη φορά θα εστιάσουμε στο δεύτερο πεδίο, το οποίο αντιστοιχεί στον αριθμό της γραμμής
Εδώ είναι μια σύντομη περιγραφή του τι κάνει κάθε μέρος της εντολής:

awk -F, '{print $2}' oasa-history: Χρησιμοποιεί το awk για να εκτυπώσει το δεύτερο πεδίο από κάθε γραμμή του αρχείου oasa-history, 
το οποίο αντιστοιχεί στον αριθμό της γραμμής (διαδρομής) του λεωφορείου.
sort: Ταξινομεί τις εξαχθείσες τιμές για να είναι σε σειρά, προετοιμάζοντας τη λίστα για την επόμενη εντολή.
uniq: Αφαιρεί τυχόν διπλότυπες εμφανίσεις, αφήνοντας μόνο μοναδικές τιμές των αριθμών γραμμών.
wc -l: Μετράει τον αριθμό των γραμμών στην τελική λίστα, παρέχοντας τον συνολικό αριθμό των διαφορετικών διαδρομών που καλύπτονται από τα δεδομένα.
Αυτή η εντολή θα σας δώσει τον αριθμό των διαφορετικών διαδρομών (γραμμών λεωφορείων) που εμφανίζονται στο αρχείο δεδομένων oasa-history.



ερωτηση σελ. 10/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{split($1, a, "T"); print a[1]}' oasa-history | sort | uniq | wc -l
57
Για να βρείτε πόσες διαφορετικές ημερομηνίες καλύπτονται από τα δεδομένα, μπορείτε να χρησιμοποιήσετε την εντολή awk στο Cygwin για να εξάγετε την ημερομηνία από το πεδίο της 
χρονικής στιγμής καταγραφής των δεδομένων, να αφαιρέσετε τυχόν διπλότυπες ημερομηνίες και να μετρήσετε τον συνολικό αριθμό των μοναδικών ημερομηνιών.

Δεδομένου ότι το πεδίο της χρονικής στιγμής καταγραφής των δεδομένων φαίνεται να είναι στην πρώτη στήλη του αρχείου και είναι σε μορφή ISO 8601 (π.χ., 2024-01-01T00:00:14),
 μπορούμε να χρησιμοποιήσουμε το awk για να εξάγουμε μόνο το μέρος της ημερομηνίας (πριν από το "T"):
Ας αναλύσουμε την εντολή βήμα προς βήμα:

awk -F, '{split($1, a, "T"); print a[1]}' oasa-history: Αυτή η εντολή χρησιμοποιεί το awk για να διαχωρίσει κάθε γραμμή του αρχείου 
oasa-history χρησιμοποιώντας το κόμμα (,) ως διαχωριστικό και εκτελεί τη συνάρτηση split στο πρώτο πεδίο ($1) για να το διαχωρίσει περαιτέρω στην
 ημερομηνία και την ώρα χρησιμοποιώντας το "T" ως διαχωριστικό. Στη συνέχεια, εκτυπώνει μόνο το μέρος της ημερομηνίας (a[1]).
sort: Ταξινομεί τις εξαχθείσες ημερομηνίες.
uniq: Αφαιρεί τυχόν διπλότυπες ημερομηνίες, αφήνοντας μια λίστα με μόνο μοναδικές τιμές.
wc -l: Μετράει τον αριθμό των γραμμών στην τελική λίστα, ο οποίος αντιστοιχεί στον συνολικό αριθμό διαφορετικών ημερομηνιών που καλύπτονται από τα δεδομένα.
Αυτή η εντολή θα σας δώσει τον ακριβή αριθμό των διαφορετικών ημερομηνιών που καταγράφηκαν στο αρχείο δεδομένων oasa-history.


ερωτηση σελ. 11/27
Για να βρείτε ποια διαδρομή συνδέεται με τις περισσότερες αναφορές θέσης στα δεδομένα σας, μπορείτε να χρησιμοποιήσετε μια σειρά από 
εντολές στο Cygwin που θα εξάγουν τον αριθμό της διαδρομής από κάθε εγγραφή, θα μετρήσουν πόσες φορές εμφανίζεται κάθε διαδρομή και στη 
συνέχεια θα επιλέξουν τη διαδρομή με τις περισσότερες εμφανίσεις.
Μπορείτε να το κάνετε αυτό με την εντολή awk, σε συνδυασμό με τις εντολές sort και uniq για να καταμετρήσετε τις εμφανίσεις και το sort
 με παράμετρο -n για να ταξινομήσετε τα αποτελέσματα βάσει αριθμού εμφανίσεων, και τέλος το tail για να επιλέξετε την κορυφαία εγγραφή:
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $2}' oasa-history | sort | uniq -c | sort -nr | head -n 1
  72146 3609( the route)
Ας δούμε τι κάνει κάθε μέρος της εντολής:

awk -F, '{print $2}' oasa-history: Χρησιμοποιεί το awk για να διαβάσει το αρχείο oasa-history, διαχωρίζοντας τα πεδία με κόμμα (-F,) 
και εκτυπώνοντας το δεύτερο πεδίο, το οποίο αντιστοιχεί στον αριθμό της διαδρομής.
sort: Ταξινομεί τους αριθμούς των διαδρομών αλφαβητικά/αριθμητικά.
uniq -c: Συνδυάζει συνεχόμενες εμφανίσεις του ίδιου αριθμού διαδρομής σε μία και προσθέτει έναν μετρητή για να δείξει πόσες φορές εμφανίζεται κάθε διαδρομή.
sort -nr: Ταξινομεί τις εγγραφές βάσει του μετρητή εμφανίσεων, από τις περισσότερες προς τις λιγότερες.
head -n 1: Εμφανίζει την πρώτη εγγραφή από το ταξινομημένο αποτέλεσμα, δηλαδή τη διαδρομή με τις περισσότερες εμφανίσεις.
Η εντολή αυτή θα σας δώσει τον αριθμό της διαδρομής που εμφανίζεται περισσότερο στα δεδομένα και τον αριθμό των εμφανίσεων της.


ερωτηση σελ. 12/27

Για να βρείτε πόσες αναφορές θέσης (position reports) εμφανίζονται περισσότερες από μία φορά στα δεδομένα,
 μπορείτε να χρησιμοποιήσετε τις εντολές awk, sort, uniq και wc στο Cygwin. Η διαδικασία αυτή απαιτεί να εξάγετε πρώτα τις αναφορές
 θέσης από τα δεδομένα, να τις ταξινομήσετε, να βρείτε τις μοναδικές με μετρητή εμφανίσεων και στη συνέχεια να φιλτράρετε μόνο αυτές που εμφανίζονται περισσότερες από μία φορά.

Θα υποθέσουμε ότι μια "αναφορά θέσης" μπορεί να προσδιοριστεί μοναδικά από τον συνδυασμό του αριθμού γραμμής (line number), του αριθμού λεωφορείου
 (bus number) και της χρονικής στιγμής αναφοράς θέσης (position reporting timestamp). Αν χρειάζεστε να χρησιμοποιήσετε διαφορετικά πεδία για την αναγνώριση μιας "αναφοράς θέσης",
 παρακαλώ προσαρμόστε τον αριθμό του πεδίου στην εντολή awk αναλόγως.

Χρησιμοποιήστε την παρακάτω εντολή:
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $2,$3,$4}' oasa-history | sort | uniq -c | awk '$1 > 1' | wc -l
114081
Ας αναλύσουμε την εντολή βήμα προς βήμα:

awk -F, '{print $2,$3,$4}' oasa-history: Χρησιμοποιεί το awk για να διαχωρίσει κάθε γραμμή του αρχείου oasa-history χρησιμοποιώντας το κόμμα (,) 
ως διαχωριστικό και να εκτυπώσει το δεύτερο, τρίτο και τέταρτο πεδίο, τα οποία αντιστοιχούν στον αριθμό γραμμής, τον αριθμό λεωφορείου και τη χρονική στιγμή αναφοράς θέσης αντίστοιχα.
sort: Ταξινομεί τις εξαχθείσες αναφορές θέσης.
uniq -c: Συνδυάζει συνεχόμενες εμφανίσεις της ίδιας αναφοράς θέσης σε μία και προσθέτει έναν μετρητή για να δείξει πόσες φορές εμφανίζεται κάθε αναφορά θέσης.
awk '$1 > 1': Επιλέγει μόνο τις εγγραφές που ο μετρητής τους είναι μεγαλύτερος του 1, δηλαδή αναφορές θέσης που εμφανίζονται περισσότερες από μία φορά.
wc -l: Μετράει τον συνολικό αριθμό των γραμμών στην τελική έξοδο, που αντιστοιχεί στον αριθμό των αναφορών θέσης που εμφανίζονται περισσότερες από μία φορά στα δεδομένα





ερωτηση σελ. 13/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print substr($3,1,2)}' oasa-history | grep '^[0-9][0-9]$' | sort | uniq -c | sort -nr | head -n 1
 968688 30

Για να βρείτε την πιο συχνή πρώτη διψήφια ακολουθία στους αριθμούς που έχουν ανατεθεί στα λεωφορεία, 
μπορείτε να χρησιμοποιήσετε την εντολή awk για να εξάγετε τον αριθμό του λεωφορείου από κάθε εγγραφή, να κόψετε τα πρώτα δύο ψηφία από κάθε αριθμό, και στη συνέχεια να χρησιμοποιήσετε τις εντολές sort και uniq για να καταμετρήσετε και να βρείτε την πιο συχνή ακολουθία.
Ας δούμε τι κάνει κάθε μέρος της εντολής:

awk -F, '{print substr($3,1,2)}' oasa-history: Χρησιμοποιεί το awk για να διαχωρίσει κάθε γραμμή του αρχείου oasa-history χρησιμοποιώντας το κόμμα ως διαχωριστικό και να εκτυπώσει τα πρώτα δύο ψηφία (substr($3,1,2)) του τρίτου πεδίου, το οποίο αντιστοιχεί στον αριθμό του λεωφορείου.
grep '^[0-9][0-9]$': Φιλτράρει την έξοδο για να κρατήσει μόνο τις εγγραφές που αποτελούνται αποκλειστικά από δύο ψηφία, αποκλείοντας έτσι οποιεσδήποτε μη αριθμητικές ή μη έγκυρες τιμές.
sort: Ταξινομεί τις εξαχθείσες διψήφιες ακολουθίες.
uniq -c: Συνδυάζει συνεχόμενες εμφανίσεις της ίδιας διψήφιας ακολουθίας σε μία και προσθέτει έναν μετρητή για να δείξει πόσες φορές εμφανίζεται κάθε ακολουθία.
sort -nr: Ταξινομεί τις εγ

Η έξοδος που λάβατε από την εντολή σημαίνει ότι η πιο συχνή πρώτη διψήφια ακολουθία στους αριθμούς που έχουν ανατεθεί στα λεωφορεία είναι το "30". Αυτή η διψήφια ακολουθία εμφανίζεται 968,688 φορές στα δεδομένα που αναλύσατε. 
Αυτό σημαίνει ότι από όλες οι αναφορές θέσης που καταγράφηκαν στα δεδομένα σας, το "30" είναι τα πρώτα δύο ψηφία του αριθμού λεωφορείου που εμφανίζεται πιο συχνά από οποιαδήποτε άλλη διψήφια ακολουθία.
Χρησιμοποιήστε την παρακάτω εντολή στο Cygwin:



eleni@DESKTOP-OQRR16N ~
$ awk -F, '$3 ~ /^30/ {print $3}' oasa-history | sort | uniq | wc -l
229

Η εντολή που εκτελέσατε και η απάντηση που λάβατε αποκαλύπτουν ότι η πιο συχνή πρώτη διψήφια ακολουθία στους αριθμούς που έχουν ανατεθεί στα λεωφορεία είναι το "30" και εμφανίζεται 968,688 φορές.
 Αν θέλετε να βρείτε τον αριθμό διαφορετικών αριθμών λεωφορείων που ξεκινούν με αυτή την ακολουθία ("30"), μπορείτε να χρησιμοποιήσετε μια παρόμοια προσέγγιση αλλά 
προσαρμόζοντας την εντολή για να φιλτράρετε μόνο τους αριθμούς που ξεκινούν με "30" και στη συνέχεια να μετρήσετε τις μοναδικές εμφανίσεις.
awk -F, '$3 ~ /^30/ {print $3}' oasa-history: Χρησιμοποιεί το awk για να επιλέξει και να εκτυπώσει τον τρίτο στήλη (αριθμό λεωφορείου) από κάθε γραμμή του αρχείου oasa-history,
 αλλά μόνο για εκείνες τις γραμμές όπου ο αριθμός λεωφορείου ξεκινά με "30".
sort: Ταξινομεί τους αριθμούς των λεωφορείων.
uniq: Αφαιρεί τυχόν διπλότυπες εμφανίσεις, αφήνοντας μια λίστα μόνο με μοναδικούς αριθμούς λεωφορείων που ξεκινούν με "30".
wc -l: Μετράει τον συνολικό αριθμό των γραμμών στην τελική έξοδο, δίνοντάς σας τον αριθμό διαφορετικών αριθμών λεωφορείων που ξεκινούν με την ακολουθία "30".




ερωτηση σελ. 14/27

eleni@DESKTOP-OQRR16N ~
$ total_buses=$(awk -F, '{print $3}' oasa-history | sort | uniq | wc -l)

eleni@DESKTOP-OQRR16N ~
$ operated_on_jan26=$(grep '2024-01-26' oasa-history | awk -F, '{print $3}' | sort | uniq | wc -l)

eleni@DESKTOP-OQRR16N ~
$ not_operated_on_jan26=$((total_buses - operated_on_jan26))

eleni@DESKTOP-OQRR16N ~
$ echo "Buses that did not operate on January 26th, 2024: $not_operated_on_jan26"
Buses that did not operate on January 26th, 2024: 391

Αντικαταστήσαμε την cut με awk για να επιλέξουμε την τρίτη στήλη ($3), η οποία αντιστοιχεί στον αριθμό του λεωφορείου.
Έχουμε ρυθμίσει την grep να αναζητά για εγγραφές που περιέχουν την ημερομηνία 2024-01-26, προσδιορίζοντας έτσι τις εγγραφές που αφορούν λειτουργίες λεωφορείων στις 26 Ιανουαρίου 2024.
Αντικαταστήσαμε το bus_data.csv με oasa-history για να αναφερθούμε στο σωστό αρχείο.
Αυτός ο τροποποιημένος κώδικας θα πρέπει να εκτελεστεί στο Cygwin και θα σας δώσει τον αριθμό των λεωφορείων που δεν λειτούργησαν στις 26 Ιανουαρίου 2024, βάσει των δεδομένων στο oasa-history


ερωτηση σελ. 15/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print substr($1,1,10)}' oasa-history | sort | uniq -c | sort -nr | head -n 1
 159414 2024-01-15
Για να βρείτε σε ποια ημερομηνία υπήρχαν τα περισσότερα λεωφορεία στον δρόμο με βάση τα δεδομένα σας, μπορείτε να χρησιμοποιήσετε μια σειρά από εντολές 
στο Cygwin για να αναλύσετε το αρχείο oasa-history. Η διαδικασία περιλαμβάνει την εξαγωγή της ημερομηνίας από κάθε εγγραφή, την καταμέτρηση του πλήθους 
των λεωφορείων για κάθε ημερομηνία και την εύρεση της ημερομηνίας με το μεγαλύτερο αριθμό λεωφορείων.

Δεδομένου ότι ο αριθμός του λεωφορείου εμφανίζεται στο τρίτο πεδίο και η χρονική στιγμή καταγραφής στο πρώτο πεδίο
Ας αναλύσουμε την εντολή βήμα προς βήμα:

awk -F, '{print substr($1,1,10)}' oasa-history: Χρησιμοποιεί το awk για να διαχωρίσει κάθε γραμμή του αρχείου oasa-history χρησιμοποιώντας το κόμμα ως 
διαχωριστικό και να εκτυπώσει τα πρώτα 10 ψηφία του πρώτου πεδίου, τα οποία αντιστοιχούν στην ημερομηνία (σε μορφή ISO YYYY-MM-DD) της καταγραφής.
sort: Ταξινομεί τις εξαγόμενες ημερομηνίες.
uniq -c: Συνδυάζει συνεχόμενες εμφανίσεις της ίδιας ημερομηνίας σε μία και προσθέτει έναν μετρητή για να δείξει πόσες φορές εμφανίζεται κάθε ημερομηνία.
sort -nr: Ταξινομεί τις εγγραφές βάσει του μετρητή εμφανίσεων, από τις περισσότερες προς τις λιγότερες εμφανίσεις.
head -n 1: Εμφανίζει την πρώτη εγγραφή από το ταξινομημένο αποτέλεσμα, δηλαδή την ημερομηνία με το μεγαλύτερο αριθμό λεωφορείων στον δρόμο.
Αυτή η εντολή θα σας δώσει την ημερομηνία (σε μορφή ISO YYYY-MM-DD) με τον μεγαλύτερο αριθμό λεωφορείων που καταγράφηκαν στον δρόμο, καθώς και τον αριθμό 
των λεωφορείων που καταγράφηκαν εκείνη την ημέρα.




ερωτηση σελ. 16/27

eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $2, $3}' oasa-history | sort | uniq | awk '{print $1}' | sort | uniq -c | sort -nr | head -n 1
    226 3566(Route number)

Για να βρείτε ποια διαδρομή έχει εξυπηρετηθεί από τον υψηλότερο αριθμό διαφορετικών λεωφορείων στα δεδομένα σας, μπορείτε να χρησιμοποιήσετε την εντολή awk, σε συνδυασμό με τις εντολές sort, uniq, και τελικά μια ακόμα
 sort για να ταξινομήσετε τις διαδρομές βάσει του αριθμού διαφορετικών λεωφορείων που τις έχουν εξυπηρετήσει.

Ας δούμε τι κάνει κάθε μέρος της εντολής:

awk -F, '{print $2, $3}' oasa-history: Χρησιμοποιεί το awk για να διαβάσει κάθε γραμμή του αρχείου oasa-history, διαχωρίζοντας τα πεδία με κόμμα και εκτυπώνοντας τον αριθμό της διαδρομής ($2) και τον αριθμό του λεωφορείου ($3).
sort | uniq: Ταξινομεί τα ζευγάρια αριθμό διαδρομής-αριθμό λεωφορείου και αφαιρεί τυχόν διπλότυπα, εξασφαλίζοντας ότι κάθε λεωφορείο μετριέται μία φορά ανά διαδρομή.
awk '{print $1}': Εκτυπώνει μόνο τον αριθμό της διαδρομής από το μοναδικό σύνολο αριθμών διαδρομής-αριθμό λεωφορείου, προετοιμάζοντας μια λίστα αριθμών διαδρομών.
sort | uniq -c: Ταξινομεί τους αριθμούς των διαδρομών και καταμετρά πόσες φορές εμφανίζεται κάθε διαδρομή, δίνοντας τον αριθμό διαφορετικών λεωφορείων για κάθε διαδρομή.
sort -nr | head -n 1: Ταξινομεί τις διαδρομές βάσει του αριθμού διαφορετικών λεωφορείων που τις έχουν εξυπηρετήσει, από την περισσότερη προς τη λιγότερη εξυπηρέτηση, και εκτυπώνει την κορυφαία διαδρομή.
Αυτή η εντολή θα σας δώσει τον αριθμό της διαδρομής που έχει εξυπηρετηθεί από τον μεγαλύτερο αριθμό διαφορετικών λεωφορείων, μαζί με τον αριθμό των λεωφορείων που έχουν εξυπηρετήσει αυτή τη διαδρομή.



ερωτηση σελ. 17/27

eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print substr($1,12,2)}' oasa-history | sort | uniq -c | sort -nr | head -n 1
 456390 11
Για να βρείτε σε ποια ώρα της ημέρας υπάρχουν συνολικά τα περισσότερα λεωφορεία στον δρόμο βάσει των δεδομένων σας, μπορείτε να χρησιμοποιήσετε την εντολή awk για να εξάγετε την ώρα από το πεδίο της χρονικής στιγμής καταγραφής των δεδομένων, να μετρήσετε πόσα λεωφορεία έχουν καταγραφεί για κάθε ώρα και στη συνέχεια να βρείτε την ώρα με τον μεγαλύτερο αριθμό λεωφορείων.

Αν υποθέσουμε ότι η χρονική στιγμή καταγραφής βρίσκεται στο πρώτο πεδίο των δεδομένων σας και έχει τη μορφή YYYY-MM-DDTHH:MM:SS, όπου HH είναι η ώρα, 

Εδώ είναι η ανάλυση της εντολής:

awk -F, '{print substr($1,12,2)}' oasa-history: Χρησιμοποιεί το awk για να διαχωρίσει τα πεδία με κόμμα και να εκτυπώσει τα δύο ψηφία που αντιστοιχούν στην ώρα (από τη θέση 12 έως 13) του πρώτου πεδίου, το οποίο είναι η χρονική στιγμή καταγραφής.
sort: Ταξινομεί τις ώρες.
uniq -c: Συνδυάζει συνεχόμενες εμφανίσεις της ίδιας ώρας σε μία και προσθέτει έναν μετρητή για να δείξει πόσες φορές εμφανίζεται κάθε ώρα.
sort -nr: Ταξινομεί τις εμφανίσεις από την περισσότερη προς τη λιγότερη.
head -n 1: Εμφανίζει την πρώτη γραμμή της ταξινομημένης λίστας, δηλαδή την ώρα με τον μεγαλύτερο αριθμό λεωφορείων στον δρόμο.
Αυτή η εντολή θα σας δώσει την ώρα και τον αριθμό των λεωφορείων που ήταν στον δρόμο την πιο πολυσύχναστη ώρα της ημέρας, βάσει των δεδομένων σας.


Η έξοδος 456390 11 από την εντολή που εκτελέσατε σημαίνει ότι η πιο πολυσύχναστη ώρα της ημέρας, δηλαδή η ώρα κατά την οποία υπήρχαν συνολικά τα περισσότερα 
λεωφορεία στον δρόμο στα δεδομένα σας, ήταν η 11η ώρα (11 π.μ.). Κατά τη διάρκεια αυτής της ώρας, καταγράφηκαν συνολικά 456,390 λεωφορεία.





ερωτηση σελ. 18/27

eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print substr($1,12,2)}' oasa-history | sort | uniq -c | sort -n | head -n 1
  22725 03

Για να βρείτε την ώρα της ημέρας κατά την οποία υπάρχουν συνολικά τα λιγότερα λεωφορεία στον δρόμο βάσει των δεδομένων σας, μπορείτε να ακολουθήσετε μια παρόμοια διαδικασία με αυτή που 
χρησιμοποιήσατε για να βρείτε την πιο πολυσύχναστη ώρα, αλλά αυτή τη φορά να επιλέξετε την τελευταία γραμμή αντί για την πρώτη μετά την ταξινόμηση.

awk -F, '{print substr($1,12,2)}' oasa-history: Χρησιμοποιεί το awk για να εκτυπώσει τα δύο ψηφία που αντιστοιχούν στην ώρα (από τη θέση 12 έως 13) του πρώτου πεδίου, το οποίο είναι η 
χρονική στιγμή καταγραφής, διαχωρίζοντας τα πεδία με κόμμα.
sort: Ταξινομεί τις ώρες.
uniq -c: Συνδυάζει συνεχόμενες εμφανίσεις της ίδιας ώρας σε μία και προσθέτει έναν μετρητή για να δείξει πόσες φορές εμφανίζεται κάθε ώρα.
sort -n: Ταξινομεί τις εγγραφές ανάλογα με τον αριθμό των λεωφορείων από τον μικρότερο προς τον μεγαλύτερο.
head -n 1: Εμφανίζει την πρώτη γραμμή της ταξινομημένης λίστας, δηλαδή την ώρα με τον μικρότερο αριθμό λεωφορείων στον δρόμο.





ερωτηση σελ. 19/27

eleni@DESKTOP-OQRR16N ~
$ awk -F, '{split($1,a,"[-T:]"); day=mktime(a[1] " " a[2] " " a[3] " 0 0 0"); print strftime("%A", day)}' oasa-history | sort | uniq -c | sort -nr | head -n 1
1137998 Monday

Για να βρείτε για ποια ημέρα της εβδομάδας το σύνολο δεδομένων σας περιέχει τις περισσότερες εγγραφές, χωρίς τη χρήση της εντολής for και λούπες, μπορείτε να 
χρησιμοποιήσετε τη συνάρτηση strftime του GNU awk για να μετατρέψετε τις χρονικές στιγμές καταγραφής σε ημέρες της εβδομάδας και στη συνέχεια να καταμετρήσετε και να ταξινομήσετε τις εγγραφές ανά ημέρα.

Υποθέτοντας ότι η χρονική στιγμή καταγραφής βρίσκεται στο πρώτο πεδίο των δεδομένων σας και είναι σε μορφή ISO (π.χ., YYYY-MM-DDTHH:MM:SS)

awk -F,: Ξεκινά το awk και ορίζει το κόμμα ως τον διαχωριστή πεδίου.
{split($1,a,"[-T:]");: Χωρίζει το πρώτο πεδίο στον πίνακα a χρησιμοποιώντας ως διαχωριστικά το -, το T, και το :, διαχωρίζοντας έτσι την ημερομηνία και την ώρα.
day=mktime(a[1] " " a[2] " " a[3] " 0 0 0");: Μετατρέπει την ημερομηνία σε timestamp χρησιμοποιώντας την mktime.
print strftime("%A", day): Μετατρέπει το timestamp πίσω σε μορφή αναγνώσιμη από τον άνθρωπο, εκτυπώνοντας την ημέρα της εβδομάδας για κάθε εγγραφή.
sort | uniq -c | sort -nr: Ταξινομεί τις ημέρες, συνδυάζει τις εμφανίσεις κάθε ημέρας μετρώντας τες, και στη συνέχεια ταξινομεί τα αποτελέσματα ανάλογα με τον αριθμό των εγγραφών φθίνουσα.
head -n 1: Εμφανίζει την πρώτη γραμμή της ταξινομημένης λίστας, δηλαδή την ημέρα με τις περισσότερες εγγραφές.
Αυτή η εντολή θα σας δώσει την ημέρα της εβδομάδας με τον υψηλότερο αριθμό εγγραφών στο σύνολο δεδομένων σας, μαζί με τον αριθμό των εγγραφών.






ερωτηση σελ. 20/27
Για να βρείτε τις γεωγραφικές συντεταγμένες του πλαισίου αναφοράς (bounding box) της περιοχής που εξυπηρετούν τα λεωφορεία, βασιζόμενοι στο αρχείο oasa-history, θα χρειαστεί να εντοπίσετε την πιο βόρεια, νότια, ανατολική και δυτική γεωγραφική συντεταγμένη (γεωγραφικό πλάτος και μήκος) από όλες τις εγγραφές. Μπορείτε να το κάνετε αυτό χρησιμοποιώντας τις εντολές awk, sort και head στο Cygwin.

Παρακάτω παρέχονται οι εντολές για να βρείτε την κάθε μία από τις τέσσερις τιμές:

Πιο Βόρεια Γεωγραφική Συντεταγμένη (γεωγραφικό πλάτος)
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $5}' oasa-history | sort -nr | head -n 1
38.2236860

Πιο Νότια Γεωγραφική Συντεταγμένη (γεωγραφικό πλάτος)
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $5}' oasa-history | sort -n | head -n 1
37.7173010

Πιο Δυτική Γεωγραφική Συντεταγμένη (γεωγραφικό μήκος)
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $6}' oasa-history | sort -n | head -n 1
23.3198810

Πιο Ανατολική Γεωγραφική Συντεταγμένη (γεωγραφικό μήκος)
eleni@DESKTOP-OQRR16N ~
$ awk -F, '{print $6}' oasa-history | sort -nr | head -n 1
24.0213480

Σε κάθε μία από αυτές τις εντολές:

awk -F, '{print $5}' και awk -F, '{print $6}' χρησιμοποιούνται για να εξάγουν το γεωγραφικό πλάτος ($5) και το γεωγραφικό μήκος ($6) αντίστοιχα από κάθε εγγραφή.
sort -n και sort -nr ταξινομούν τις τιμές αύξουσα (-n) και φθίνουσα (-nr) αντίστοιχα.
head -n 1 επιλέγει την πρώτη γραμμή από την ταξινομημένη λίστα, παρέχοντας την υψηλότερη ή χαμηλότερη τιμή ανάλογα με την περίπτωση.
Αυτές οι εντολές θα σας δώσουν τις γεωγραφικές συντεταγμένες του πλαισίου αναφοράς (bounding box) της περιοχής που εξυπηρετείται από τα λεωφορεία, βάσει των δεδομένων σα




ερωτηση σελ. 21/27

Για να βρείτε ποιο λεωφορείο βρίσκεται πιο κοντά στην αγαπημένη σας τοποθεσία, πρέπει πρώτα να ορίσετε τις γεωγραφικές συντεταγμένες της τοποθεσίας σας και στη συνέχεια να υπολογίσετε την απόσταση από κάθε λεωφορείο χρησιμοποιώντας την απλή Ευκλείδεια απόσταση.

Ας υποθέσουμε ότι η αγαπημένη σας τοποθεσία έχει γεωγραφικό πλάτος 37.9838 βαθμούς βόρεια και γεωγραφικό μήκος 23.7275 βαθμούς ανατολικά (π.χ., Αθήνα, Ελλάδα).

Για να υπολογίσετε την απόσταση σε Ευκλείδειο χώρο, μπορείτε να χρησιμοποιήσετε την ακόλουθη εντολή awk, η οποία θα υπολογίσει την απόσταση από την αγαπημένη σας τοποθεσία για κάθε λεωφορείο και στη συνέχεια θα επιλέξει το λεωφορείο με τη μικρότερη απόσταση:
eleni@DESKTOP-OQRR16N ~
$  awk -F, -v lat=37.975950802709356 -v lon=23.725578440733436 '{   # το μοναστηρακι 
    x = ($5 - lat)^2;
    y = ($6 - lon)^2;
    dist = sqrt(x + y);
    print $3, dist;
}' oasa-history | sort -k2,2n | head -n 1
10387 0.000603601  ( το λεωφορειο μου 10387 για μοναστηρακι) 

Ας αναλύσουμε την εντολή:

-F, ορίζει τον διαχωριστή πεδίων σε κόμμα.
-v lat=37.9838 -v lon=23.7275 δηλώνει τις μεταβλητές για το γεωγραφικό πλάτος και μήκος της αγαπημένης σας τοποθεσίας.
Το σώμα του awk υπολογίζει την Ευκλείδεια απόσταση από κάθε σημείο (γεωγραφικό πλάτος και μήκος κάθε λεωφορείου) έως την αγαπημένη σας τοποθεσία.
sort -k2,2n ταξινομεί τα αποτελέσματα βάσει της απόστασης, αύξουσ


Για να βρείτε τη γεωγραφική θέση (γεωγραφικό πλάτος και μήκος) του λεωφορείου που βρίσκεται στην ελάχιστη απόσταση από την αγαπημένη σας τοποθεσία, μπορείτε να χρησιμοποιήσετε την ίδια λογική με την προηγούμενη εντολή, αλλά αυτή τη φορά να εκτυπώσετε τις συντεταγμένες του λεωφορείου που βρίσκεται πιο κοντά, αντί για τον αριθμό του λεωφορείου και την απόσταση.

Εδώ είναι η εντολή που πρέπει να χρησιμοποιήσετε:
eleni@DESKTOP-OQRR16N ~
$ awk -F, -v lat=37.975950802709356 -v lon=23.725578440733436 '{
    x = ($5 - lat)^2;
    y = ($6 - lon)^2;
    dist = sqrt(x + y);
    print $5, $6, dist;
}' oasa-history | sort -k3,3n | head -n 1
37.9764450 23.7259250 0.000603601

Αυτή η εντολή θα κάνει τα εξής:

awk -F, -v lat=3.... -v lon=23.... '{...}' oasa-history: Θέτει τις συντεταγμένες της αγαπημένης σας τοποθεσίας ως μεταβλητές και διατρέχει το αρχείο oasa-history, υπολογίζοντας την απόσταση από κάθε λεωφορείο μέχρι την αγαπημένη σας τοποθεσία.
print $5, $6, dist;: Εκτυπώνει το γεωγραφικό πλάτος και μήκος κάθε λεωφορείου μαζί με την απόσταση από την αγαπημένη σας τοποθεσία.
sort -k3,3n | head -n 1: Ταξινομεί τα αποτελέσματα ανά απόσταση αύξουσα και επιλέγει την πρώτη εγγραφή, δηλαδή τη θέση του λεωφορείου που βρίσκεται πιο κοντά στην αγαπημένη σας τοποθεσία.
Η εκτύπωση θα σας δώσει το γεωγραφικό πλάτος και μήκος της τοποθεσίας του λεωφορείου που βρίσκεται στην ελάχιστη απόσταση από την αγαπημένη σας τοποθεσία.


τ


ερωτηση σελ. 22/27   How many position reports have been sent by the chosen bus?
eleni@DESKTOP-OQRR16N ~
$ awk -F, '$3 == "10387" {count++} END {print count}' oasa-history
1635




ερωτηση σελ. 23/27  What was the chosen bus's last position in the obtained data stream?
eleni@DESKTOP-OQRR16N ~
$ awk -F, '$3 == "10387"' oasa-history | sort -t, -k2,2 | tail -n 1 | awk -F, '{print "Latitude (degrees north): " $5 ", Longitude (degrees east): " $6}'
Latitude (degrees north): 37.9760400, Longitude (degrees east): 23.7140070



ερωτηση σελ. 24/27On which date has the chosen bus given the most position reports?
eleni@DESKTOP-OQRR16N ~
$ awk -F, '$3 == "10387" {print substr($1, 1, 10)}' oasa-history | sort | uniq -c | sort -nr | head -n 1
    197 2024-01-12




ερωτηση σελ. 25/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '$3 == "10387" {print $2}' oasa-history | sort | uniq | wc -l
23


ερωτηση σελ. 26/27
eleni@DESKTOP-OQRR16N ~
$ awk -F, '$3 == "10387" {print $2}' oasa-history | sort | uniq | join - <(awk -F, '{print $2, $3}' oasa-history | sort | uniq) | awk '{print $2}' | sort | uniq | wc -l
157
